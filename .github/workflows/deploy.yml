name: EyeDock Deploy Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Pular testes'
        required: false
        default: false
        type: boolean

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs=-Xmx4096m -Dorg.gradle.parallel=true
  ANDROID_SDK_ROOT: ${{ secrets.ANDROID_SDK_ROOT }}

jobs:
  # Job 1: Testes Automatizados
  automated-tests:
    name: 🧪 Testes Automatizados
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests || github.event_name != 'workflow_dispatch' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔍 Run Lint & Static Analysis
      run: |
        echo "🔍 Executando análise estática..."
        ./gradlew lint
        ./gradlew detekt
        ./gradlew ktlintCheck
        
    - name: 🧪 Run Unit Tests
      run: |
        echo "🧪 Executando testes unitários..."
        ./gradlew :app:testDebugUnitTest --info --rerun-tasks
        
    - name: 📊 Generate Test Coverage
      run: |
        echo "📊 Gerando relatório de cobertura..."
        ./gradlew jacocoTestReport
        
    - name: ✅ Test Quality Gate
      run: |
        echo "✅ Verificando qualidade dos testes..."
        # Verificar se todos os testes passaram
        if [ -f "app/build/reports/tests/testDebugUnitTest/index.html" ]; then
          echo "✅ Testes executados com sucesso!"
        else
          echo "❌ Falha nos testes!"
          exit 1
        fi
        
    - name: 📤 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_id }}
        path: |
          app/build/reports/tests/
          app/build/reports/jacoco/
          app/build/test-results/
        retention-days: 30
        
    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./app/build/reports/jacoco/test/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella

  # Job 2: Build da Aplicação
  build-app:
    name: 🔨 Build da Aplicação
    runs-on: ubuntu-latest
    needs: automated-tests
    if: success()
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔨 Build Debug APK
      run: |
        echo "🔨 Construindo APK de debug..."
        ./gradlew assembleDebug
        
    - name: 🔨 Build Release AAB
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
      run: |
        echo "🔨 Construindo AAB de release..."
        ./gradlew bundleRelease
        
    - name: 📤 Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk-${{ github.run_id }}
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        
    - name: 📤 Upload Release AAB
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-artifact@v4
      with:
        name: release-aab-${{ github.run_id }}
        path: app/build/outputs/bundle/release/app-release.aab
        retention-days: 90

  # Job 3: Deploy para Staging
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [automated-tests, build-app]
    if: success() && (github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging'))
    
    steps:
    - name: 📥 Download Debug APK
      uses: actions/download-artifact@v4
      with:
        name: debug-apk-${{ github.run_id }}
        path: ./artifacts
        
    - name: 📱 Deploy to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{ secrets.FIREBASE_APP_ID }}
        serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        groups: testers
        file: ./artifacts/app-debug.apk
        releaseNotes: |
          🚀 Deploy Staging - Build #${{ github.run_number }}
          
          📋 Mudanças:
          - Testes automatizados: ✅
          - Build: ✅
          - Deploy: ✅
          
          🔗 Commit: ${{ github.sha }}
          👤 Autor: ${{ github.actor }}
          
    - name: 📧 Notify Staging Deploy
      run: |
        echo "🚀 Deploy para staging concluído!"
        echo "📱 APK disponível no Firebase App Distribution"
        echo "🔗 Build: #${{ github.run_number }}"
        echo "📋 Commit: ${{ github.sha }}"

  # Job 4: Deploy para Production
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: [automated-tests, build-app]
    if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production'))
    
    steps:
    - name: 📥 Download Release AAB
      uses: actions/download-artifact@v4
      with:
        name: release-aab-${{ github.run_id }}
        path: ./artifacts
        
    - name: 🔐 Setup Keystore
      env:
        ENCODED_KEYSTORE: ${{ secrets.ENCODED_KEYSTORE }}
      run: |
        echo "🔐 Configurando keystore..."
        echo $ENCODED_KEYSTORE | base64 -d > keystore.jks
        
    - name: 🔨 Build Signed Release AAB
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo "🔨 Construindo AAB assinado..."
        ./gradlew bundleRelease \
          -Pandroid.injected.signing.store.file=../keystore.jks \
          -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
          -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
          -Pandroid.injected.signing.key.password=$KEY_PASSWORD
          
    - name: 📤 Upload Signed AAB
      uses: actions/upload-artifact@v4
      with:
        name: signed-release-aab-${{ github.run_id }}
        path: app/build/outputs/bundle/release/app-release.aab
        retention-days: 365
        
    - name: 📤 Upload Mapping File
      uses: actions/upload-artifact@v4
      with:
        name: mapping-file-${{ github.run_id }}
        path: app/build/outputs/mapping/release/mapping.txt
        retention-days: 365
        
    - name: 📱 Deploy to Google Play Store
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_KEY }}
        packageName: com.eyedock.app
        releaseFiles: app/build/outputs/bundle/release/app-release.aab
        track: internal
        status: completed
        
    - name: 📧 Notify Production Deploy
      run: |
        echo "🚀 Deploy para produção concluído!"
        echo "📱 AAB enviado para Google Play Store"
        echo "🔗 Build: #${{ github.run_number }}"
        echo "📋 Commit: ${{ github.sha }}"
        echo "🏷️ Tag: ${{ github.ref_name }}"

  # Job 5: Notificações
  notifications:
    name: 📧 Notificações
    runs-on: ubuntu-latest
    needs: [automated-tests, build-app, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📧 Notify Success
      if: success()
      run: |
        echo "🎉 Pipeline executado com sucesso!"
        echo "✅ Testes: ${{ needs.automated-tests.result }}"
        echo "✅ Build: ${{ needs.build-app.result }}"
        echo "✅ Staging: ${{ needs.deploy-staging.result }}"
        echo "✅ Production: ${{ needs.deploy-production.result }}"
        
    - name: 📧 Notify Failure
      if: failure()
      run: |
        echo "❌ Pipeline falhou!"
        echo "❌ Testes: ${{ needs.automated-tests.result }}"
        echo "❌ Build: ${{ needs.build-app.result }}"
        echo "❌ Staging: ${{ needs.deploy-staging.result }}"
        echo "❌ Production: ${{ needs.deploy-production.result }}"
        
    - name: 📊 Generate Deployment Report
      run: |
        echo "📊 Relatório de Deploy" > deploy-report.md
        echo "=====================" >> deploy-report.md
        echo "" >> deploy-report.md
        echo "🔗 Build: #${{ github.run_number }}" >> deploy-report.md
        echo "📋 Commit: ${{ github.sha }}" >> deploy-report.md
        echo "👤 Autor: ${{ github.actor }}" >> deploy-report.md
        echo "🏷️ Branch: ${{ github.ref_name }}" >> deploy-report.md
        echo "" >> deploy-report.md
        echo "📈 Status dos Jobs:" >> deploy-report.md
        echo "- Testes: ${{ needs.automated-tests.result }}" >> deploy-report.md
        echo "- Build: ${{ needs.build-app.result }}" >> deploy-report.md
        echo "- Staging: ${{ needs.deploy-staging.result }}" >> deploy-report.md
        echo "- Production: ${{ needs.deploy-production.result }}" >> deploy-report.md
        
    - name: 📤 Upload Deployment Report
      uses: actions/upload-artifact@v4
      with:
        name: deploy-report-${{ github.run_id }}
        path: deploy-report.md
        retention-days: 30
